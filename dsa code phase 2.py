# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-yWZPNNgaDwNPThuwAuONVYx3OiJ7ngP
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

# 1. Load your dataset
df = pd.read_csv('Final_Merged_Dataset__Complete_.csv')

# 2. Filter for 1960–2021
df_filtered = df[(df['Year'] >= 1960) & (df['Year'] <= 2021)].reset_index(drop=True)

# 3. Copy for processing
df_cleaned = df_filtered.copy()

# 4. Columns to exclude from interpolation
height_columns = ['Mean male height (cm)', 'Mean female height (cm)']

# 5. Interpolate + forward-fill + backward-fill
for column in df_cleaned.columns:
    if column not in height_columns and column not in ['Unnamed: 0', 'Year']:
        df_cleaned[column] = df_cleaned[column].interpolate(method='linear')
        df_cleaned[column] = df_cleaned[column].fillna(method='ffill')
        df_cleaned[column] = df_cleaned[column].fillna(method='bfill')

# 6. Save final cleaned dataset
df_cleaned.to_csv('Fully_Cleaned_Dataset.csv', index=False)

# 7. Display ALL rows and columns
pd.set_option('display.max_rows', None)      # Show all rows
pd.set_option('display.max_columns', None)   # Show all columns
pd.set_option('display.width', 1000)          # Make the table wide enough

# 8. Print the entire table
print(df_cleaned)

# 9. (Optional) Check missing values after cleaning
print("\nMissing values after cleaning:\n")
print(df_cleaned.isnull().sum())

from google.colab import files

# Download the file
files.download('Fully_Cleaned_Dataset.csv')

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import pearsonr

# Load your cleaned dataset
df = pd.read_csv('Fully_Cleaned_Dataset.csv')

# Prepare the data (remove rows with missing values)
df_corr = df[['gdp_per_capita', 'Mean male height (cm)']].dropna()

# Variables
x = df_corr['gdp_per_capita']
y = df_corr['Mean male height (cm)']

# Run Pearson correlation (hypothesis test)
r, p = pearsonr(x, y)

# Print test results
print("\n--- Hypothesis Test ---")
print("H₀: No correlation between GDP per capita and male height")
print("H₁: There is a correlation (expected positive)")
print(f"Pearson correlation (r): {r:.3f}")
print(f"p-value: {p:.4f}")

if p < 0.05:
    print("✅ Reject H₀: Significant correlation found!")
else:
    print("❌ Fail to reject H₀: No significant correlation.")

# Plot regression with correlation info
plt.figure(figsize=(8, 6))
sns.regplot(x=x, y=y, ci=95, line_kws={"color": "red"})
plt.title(f'Mean male height (cm) vs GDP per capita\n(r = {r:.2f}, p = {p:.4f})')
plt.xlabel('GDP per capita')
plt.ylabel('Mean male height (cm)')
plt.grid(True)
plt.tight_layout()
plt.show()

# List of key variables to plot
variables = [
    'Mean male height (cm)',
    'Mean female height (cm)',
    'gdp_per_capita',
    'daily_calories',
    'healthcare_spending_per_capita',
    'sanitation_access_percent',
    'under_five_mortality_selected',
    'stunting_percent',
    'nox_emissions'
]

# Line plots for each variable over years
for var in variables:
    if var in df.columns:
        plt.figure(figsize=(10, 5))
        sns.lineplot(x='Year', y=var, data=df)
        plt.title(f'{var} over Years')
        plt.xlabel('Year')
        plt.ylabel(var)
        plt.grid(True)
        plt.tight_layout()
        plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import chi2_contingency

# Load the cleaned dataset
df = pd.read_csv('Fully_Cleaned_Dataset.csv')

# Prepare the data (drop missing values)
df_chi = df[['Mean male height (cm)', 'daily_calories']].dropna()

# Step 1: Bin height into 3 categories
df_chi['height_group'] = pd.cut(df_chi['Mean male height (cm)'],
                                bins=[0, 171.3, 171.7, float('inf')],
                                labels=['Short', 'Medium', 'Tall'])

# Step 2: Bin daily calories into 3 categories using quantiles
df_chi['calorie_group'] = pd.qcut(df_chi['daily_calories'], q=3,
                                  labels=['Low Intake', 'Medium Intake', 'High Intake'])

# Step 3: Create contingency table
contingency = pd.crosstab(df_chi['height_group'], df_chi['calorie_group'])

# Step 4: Chi-Square test
chi2, p, dof, expected = chi2_contingency(contingency)

# Step 5: Output Chi-Square results
print("\nChi-Square Test: Height Group vs Calorie Intake Group")
print("H₀: No association between height category and calorie intake group")
print("H₁: There is an association")
print(f"Chi2 statistic = {chi2:.3f}")
print(f"Degrees of freedom = {dof}")
print(f"p-value = {p:.4f}")

if p < 0.05:
    print("✅ Reject H₀: Significant association exists!")
else:
    print("❌ Fail to reject H₀: No significant association.")

# Step 6: Visualization - Stacked Bar Chart
contingency_norm = contingency.div(contingency.sum(axis=1), axis=0)  # Normalize rows to percentage

contingency_norm.plot(kind='bar', stacked=True, figsize=(8,6), colormap='viridis')
plt.title('Distribution of Calorie Intake Groups Across Height Groups')
plt.xlabel('Height Group')
plt.ylabel('Proportion')
plt.legend(title='Calorie Intake Group', bbox_to_anchor=(1.05, 1), loc='upper left')
plt.tight_layout()
plt.grid(True)
plt.show()

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from scipy.stats import ttest_ind

# Load dataset
df = pd.read_csv('Fully_Cleaned_Dataset.csv')

# Drop missing values
df_ttest = df[['daily_calories', 'Mean male height (cm)']].dropna()

# Median split for daily calories
median_calories = df_ttest['daily_calories'].median()

# Create calorie groups based on median
df_ttest['calorie_group'] = pd.cut(
    df_ttest['daily_calories'],
    bins=[0, median_calories, 5000],  # 5000 is a safe upper bound for calories
    labels=['Low Calories', 'High Calories']
)

# Check group sizes
print("\nGroup Sizes:")
print(df_ttest['calorie_group'].value_counts())

# Separate groups
low = df_ttest[df_ttest['calorie_group'] == 'Low Calories']['Mean male height (cm)']
high = df_ttest[df_ttest['calorie_group'] == 'High Calories']['Mean male height (cm)']

# Perform T-test
t_stat, p_value = ttest_ind(low, high, equal_var=False)

print("\n--- T-Test: Low vs High Calorie Intake ---")
print("H₀: Mean height is the same for low and high calorie intake groups.")
print("H₁: Mean height is different.")
print(f"T-statistic: {t_stat:.3f}")
print(f"P-value: {p_value:.4f}")

if p_value < 0.05:
    print("✅ Reject H₀: Significant difference!")
else:
    print("❌ Fail to reject H₀: No significant difference.")

# --- Visualization 1: Boxplot ---
plt.figure(figsize=(8,6))
sns.boxplot(x='calorie_group', y='Mean male height (cm)', data=df_ttest)
plt.title(f'Mean Male Height by Calorie Intake Group\nT-test p = {p_value:.4f}')
plt.xlabel('Daily Calorie Intake Group')
plt.ylabel('Mean Male Height (cm)')
plt.grid(True)
plt.tight_layout()
plt.show()

# --- Visualization 2: Scatter plot with Regression Line ---
plt.figure(figsize=(8,6))
sns.regplot(x='daily_calories', y='Mean male height (cm)', data=df_ttest, ci=95, line_kws={"color":"red"})
plt.title('Mean Male Height vs Daily Calorie Intake (Continuous)')
plt.xlabel('Daily Calories')
plt.ylabel('Mean Male Height (cm)')
plt.grid(True)
plt.tight_layout()
plt.show()